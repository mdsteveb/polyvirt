#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'polyvirt'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/polyvirt` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/polyvirt now"
  exit 64
end

include GLI::App

program_desc 'A high-level manager for libvirt hypervisors and guests'

version Polyvirt::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Verbose output'
switch [:v,:verbose]

#desc 'Describe some flag here'
#default_value 'the default'
#arg_name 'The name of the argument'
#flag [:f,:flagname]

desc 'Commands for working with hypervisors'
arg_name 'Describe arguments to hypervisor here'
command [:hypervisor,:hv] do |c|
#  c.desc 'Describe a switch to hypervisor'
#  c.switch :s

#  c.desc 'Describe a flag to hypervisor'
#  c.default_value 'default'
#  c.flag :f
#  c.action do |global_options,options,args|

    c.desc "List all defined hypervisors"
    c.command :list do |list|
      list.action do |global_options,options,args|
      end
    end

    c.desc "Add a hypervisor definition"
    c.command [:add,:new] do |add|
      add.action do |global_options,options,args|
      end
    end

    c.desc "Remove a hypervisor definition"
    c.command [:rm,:remove,:delete] do |rm|
      rm.action do |global_options,options,args|
      end
    end

    c.desc "Display information about a hypervisor"
    c.command [:show,:display] do |show|
      show.action do |global_options,options,args|
      end
    end


    # Your command logic here

    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "hypervisor command ran"
  end
end

desc 'Commands for working with domains'
arg_name 'Describe arguments to domain here'
command :domain do |c|
  c.action do |global_options,options,args|
    puts "domain command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
